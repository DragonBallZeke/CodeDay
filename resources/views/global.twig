{% extends 'template.twig' %}
{% block section %}global{% endblock %}
{% block page %}index{% endblock %}
{% import _self as m %}
{% macro link_for(event) %}
{% if event.current_event %}{% set event = event.current_event %}{% endif %}
{% if event.has_related_events %}{{ langPrefix }}/disambiguation/{{ event.webname }}{% else %}{{ langPrefix }}/{{ event.webname }}{% endif %}
{% endmacro %}
{% macro tz_list(name, regions) %}
    {% import _self as m %}
    <section>
        <h4>{{ name }}</h4>
        <ul>
            {% for region in regions %}
                <li><a href="{{ m.link_for(region) }}">{{ region.name }}</a></li>
            {% endfor %}
        </ul>
    </section>
{% endmacro %}
{% block hero %}
    <article class="lead">
        <div id="lead-text">
            <span class="date">{{ loaded_batch.starts_at|date('F j') }}-{{ loaded_batch.ends_at|date('j') }}</span>
            <h2>{{ i18n('common.cities-hours', {'cities': (loaded_batch.events|length) }) }}</h2>
            <p>{{ i18n('common.description') }}</p>
        </div>
        <div id="map" class="map"></div>
    </article>
    <article class="cta">
        {{ i18n('global.link', {'link': '<a class="nearest_event_name nearest_event_link" href="'~m.link_for(nearest_event)~'">'~nearest_event.region_name~'</a>'}) }}
    </article>
{% endblock %}
{% block content %}
    <article class="what-is">
        <section class="video">
            <script charset="ISO-8859-1" src="//fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:56.25% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_n6xc4pm90n videoFoam=true" style="height:100%;width:100%">&nbsp;</div></div></div>
        </section>
        <section class="details">
            <h3>{{ i18n('common.fun-friends-awesome') }}</h3>
            <p>{{ i18n('common.descr-detail-1') }}</p>
            <p>{{ i18n('common.descr-detail-2') }}</p>
        </section>
    </article>

    <article class="cities">
        <section class="cta">
            <a class="nearest_event_link" href="{{ m.link_for(nearest_event) }}">{{ i18n('global.attend-cta', {'citySpan': '<span class="nearest_event_name">'~nearest_event.region_name~'</span>'}) }}</a>
            <span class="details">{{ i18n('global.cities-cta') }}</span>
        </section>
        <section class="list">
            {{ m.tz_list('Pacific', tz_regions['America/Los_Angeles']) }}
            {{ m.tz_list('Mountain', tz_regions['America/Denver']) }}
            {{ m.tz_list('Central', tz_regions['America/Chicago']) }}
            {{ m.tz_list('Eastern', tz_regions['America/Detroit']) }}
        </section>
        <p class="organize-cta">{{ i18n('global.organize-cta', {'link': langPrefix~'/new'}) }}</p>
    </article>

    <article class="sponsors">
        <h3>{{ i18n('global.sponsors')|raw }}</h3>
        <ul>
            {% include "parts/national_sponsors.twig" %}
        </ul>
        <p>Additional support from:</p>
        <ul class="small-sponsors">
            <li><a href="https://www.statefarm.com/" target="_blank" title="State Farm"><span style="background-image: url(/assets/img/sponsors/statefarm.jpg)"></span></a></li>
            <li><a href="https://legalesign.com/" target="_blank" title="legalesign"><span style="background-image:url(/assets/img/sponsors/legalesign.png);"></span></a></li>
            <li><a href="https://hackclub.com/" target="_blank" title="Hack Club"><span style="background-image:url(/assets/img/sponsors/hackclub.png)"></span></a></li>
            <li><a href="https://gaming.kinesis-ergo.com" target="_blank" title="Kinesis Gaming"><span style="background-image:url(/assets/img/sponsors/kinesis.png)"></span></a></li>
            <li><a href="https://www.wsgr.com/" target="_blank" title="WSGR"><span style="background-image:url(/assets/img/sponsors/wsgr.png)"></span></a></li>
            <li><a href="https://www.greenhousedata.com/" target="_blank" title="Green House Data"><span style="background-image:url(/assets/img/sponsors/greenhousedata.png)"></span></a></li>

        </ul>
    </article>
{% endblock %}
{% block scripts %}
    <script src="/assets/js/d3.v3.min.js"></script>
    <script src="/assets/js/topojson.v1.min.js"></script>
    <script src="/assets/js/d3.tip.js"></script>
    <script>

        // Location
        var LocationTools = {
          degToRad: function(deg){
            return deg * Math.PI / 180;
          },
          pythagorasEquirectangular: function(lat, long, lat2, long2){
            lat = LocationTools.degToRad(lat);
            lat2 = LocationTools.degToRad(lat2);
            long = LocationTools.degToRad(long);
            long2 = LocationTools.degToRad(long2);
            var R = 6371; // km
            var x = (long2-long) * Math.cos((lat+lat2)/2);
            var y = (lat2-lat);
            var d = Math.sqrt(x*x + y*y) * R;
            return d;
          },
          nearestRegion: function(cities, lat, long){
            var mindif = 99999;
            var closest;

            for (index = 0; index < cities.length; ++index) {
              var dif =  LocationTools.pythagorasEquirectangular(lat, long, cities[index].lat, cities[index].lng);
              if (dif < mindif){
                closest = index;
                mindif = dif;
              }
            }
            return cities[closest];
          }
        }

        batch_regions = [
            {% set is_first = true %}
            {% for region in batch_regions %}
            {% if not is_first %},{% endif %}{% set is_first = false %}
            {
                lat: {{ region.location.lat }},
                lng: {{ region.location.lng }},
                name: "{{ region.name }}",
                id: "{{ region.webname }}",
                nearest: {% if nearest_event.webname == region.webname %}true{% else %}false{% endif %}
            }
            {% endfor %}
        ];

        usCached = null;

        var updateMap = function(us){
          var path = d3.geo.path();

          var map = $('#map').html('<svg></svg>');
          var width = map.width();
          var height = map.width() * 0.5;

          var projection = d3.geo.albersUsa()
                  .scale((width))
                  .translate([width / 2, height / 2]);

          var path = d3.geo.path()
                  .projection(projection);

          var svg = d3.select("#map svg")
                  .attr("width", width)
                  .attr("height", height);

          var tip = d3.tip()
                  .attr('class', 'd3-tip')
                  .offset([-10, 0])
                  .html(function(d) {
                      return d.name;
                  });
          svg.call(tip);

          svg.insert("path", ".graticule")
                  .datum(topojson.feature(us, us.objects.land))
                  .attr("class", "land")
                  .attr("d", path);

          svg.insert("clipPath")
                  .attr("id", "landclip")
                  .append("path", ".graticule")
                  .datum(topojson.feature(us, us.objects.land))
                  .attr("d", path);

          svg.insert("path", ".graticule")
                  .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
                  .attr("class", "state-boundary")
                  .attr("d", path);

          svg.selectAll("circle.footprint")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(49, (width/12.5)))
                  .attr("style", "opacity: 0.05")
                  .attr("clip-path", "url(#landclip)")
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city footprint nearest";
                      } else {
                          return "city footprint";
                      }
                  });

          svg.selectAll("circle.impact")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(35, (width/25)))
                  .attr("style", "opacity: 0.075")
                  .attr("clip-path", "url(#landclip)")
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city impact nearest";
                      } else {
                          return "city impact";
                      }
                  });

          svg.selectAll("circle.outline")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(21, (width/10)))
                  .attr("style", "opacity: 0.075")
                  .attr("clip-path", "url(#landclip)")
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city outline nearest";
                      } else {
                          return "city outline";
                      }
                  });

          svg.selectAll("circle.handle")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(7, (width/100)))
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city handle nearest";
                      } else {
                          return "city handle";
                      }
                  })
                  .on('mouseover', tip.show)
                  .on('mouseout', tip.hide)
                  .on('click', function(d){
                      window.location.href = '/'+ d.id;
                  });

          d3.select(self.frameElement).style("height", height + "px");
          map.css('margin-top', '-'+(height/1.5)+'px');
        };

        var update = function() {
            // Caching the map really makes the load time quicker.
            if(!usCached){
              d3.json("/assets/topo/us.json", function(error, us) {
                usCached = us;
                updateMap(us);
              });
            }else{
              updateMap(usCached);
            }
        };

        update();
        $(window).on('resize', update);

        // $(".wrap-inner").on("mouseenter", function(){
        //     $("#lead-text").animate({
        //         "margin-bottom": "220px"
        //     });
        //
        //     $(".lead").animate({
        //         "margin-top": "0px"
        //     });
        // });
        //
        // $(".wrap-inner").on("mouseleave", function(){
        //     $("#lead-text").animate({
        //         "margin-bottom": "0px"
        //     });
        //
        //     $(".lead").animate({
        //         "margin-top": "5rem"
        //     });
        // });
    </script>
{% endblock %}
