{% extends 'template.twig' %}
{% block section %}global{% endblock %}
{% block page %}index{% endblock %}
{% block hero %}
    <article class="lead">
        <span class="date">{{ loaded_batch.starts_at|date('F j') }}-{{ loaded_batch.ends_at|date('j') }}</span>
        <h2>{{ loaded_batch.events|length }} cities. 24 hours of fun.</h2>
        <p>At CodeDay, student programmers and artists get together, build cool apps &amp; games, and have a lot of fun.
           You can attend whether you're a total beginner or very experienced.</p>
        <div id="map" class="map"></div>
    </article>
    <article class="cta">
        Learn more: <a href="/{{ nearest_event.webname }}">{{ nearest_event.region_name }}</a>, or click your city on the map above.
    </article>
{% endblock %}
{% block content %}
    <article class="what-is">
        <section class="video">
            <iframe src="//fast.wistia.net/embed/iframe/r4avh9mp2g?videoFoam=true" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" id="splash-video" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="640" height="360"></iframe>
            <script src="//fast.wistia.net/assets/external/iframe-api-v1.js"></script>
        </section>
        <section class="details">
            <h3>Have fun, make friends, build something awesome.</h3>
            <p>CodeDay is a nationwide event where student programmers, artists, musicians, actors, and everyone else
               can get together and build apps &amp; games for 24 hours. Students of all skill levels are
               welcome&thinsp;&mdash;&thinsp;we have workshops and mentors who can help if you're new!</p>
            <p>At the beginning of CodeDay, everyone with an idea comes up and pitches it to the group. If you're on
               your own, or just without an idea, this is the time for you to build whatever you want.</p>
        </section>
    </article>

    <article class="cities">
        <section class="list">
            <h3>Select your nearest city for more information.</h3>
            <section>
                <h4>Pacific</h4>
                <ul>
                    {% for region in tz_regions['America/Los_Angeles'] %}
                        <li><a href="/{{ region.webname }}">{{ region.name }}</a></li>
                    {% endfor %}
                </ul>
            </section>
            <section>
                <h4>Mountain</h4>
                <ul>
                    {% for region in tz_regions['America/Denver'] %}
                        <li><a href="/{{ region.webname }}">{{ region.name }}</a></li>
                    {% endfor %}
                </ul>
            </section>
            <section>
                <h4>Central</h4>
                <ul>
                    {% for region in tz_regions['America/Chicago'] %}
                        <li><a href="/{{ region.webname }}">{{ region.name }}</a></li>
                    {% endfor %}
                </ul>
            </section>
            <section>
                <h4>Eastern</h4>
                <ul>
                    {% for region in tz_regions['America/Detroit'] %}
                        <li><a href="/{{ region.webname }}">{{ region.name }}</a></li>
                    {% endfor %}
                </ul>
            </section>
        </section>
        <img src="/assets/img/code.jpg" alt="" />
    </article>

    <article class="sponsors">
        <h3>CodeDay is supported nationwide by these sponsors:</h3>
        <ul>
            {% include "parts/national_sponsors.twig" %}
        </ul>
    </article>
{% endblock %}
{% block scripts %}
    <script src="/assets/js/d3.v3.min.js"></script>
    <script src="/assets/js/topojson.v1.min.js"></script>
    <script src="/assets/js/d3.tip.js"></script>
    <script>

        batch_regions = [
            {% set is_first = true %}
            {% for region in batch_regions %}
            {% if not is_first %},{% endif %}{% set is_first = false %}
            {
                lat: {{ region.location.lat }},
                lng: {{ region.location.lng }},
                name: "{{ region.name }}",
                id: "{{ region.webname }}",
                nearest: {% if nearest_event.webname == region.webname %}true{% else %}false{% endif %}
            }
            {% endfor %}
        ];

        usCached = null;

        var updateMap = function(us){
          var path = d3.geo.path();

          var map = $('#map').html('<svg></svg>');
          var width = map.width();
          var height = map.width() * 0.5;

          var projection = d3.geo.albersUsa()
                  .scale((width))
                  .translate([width / 2, height / 2]);

          var path = d3.geo.path()
                  .projection(projection);

          var svg = d3.select("#map svg")
                  .attr("width", width)
                  .attr("height", height);

          var tip = d3.tip()
                  .attr('class', 'd3-tip')
                  .offset([-10, 0])
                  .html(function(d) {
                      return d.name;
                  });
          svg.call(tip);

          svg.insert("path", ".graticule")
                  .datum(topojson.feature(us, us.objects.land))
                  .attr("class", "land")
                  .attr("d", path);

          svg.insert("clipPath")
                  .attr("id", "landclip")
                  .append("path", ".graticule")
                  .datum(topojson.feature(us, us.objects.land))
                  .attr("d", path);

          svg.insert("path", ".graticule")
                  .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
                  .attr("class", "state-boundary")
                  .attr("d", path);

          svg.selectAll("circle.footprint")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(49, (width/12.5)))
                  .attr("style", "opacity: 0.05")
                  .attr("clip-path", "url(#landclip)")
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city footprint nearest";
                      } else {
                          return "city footprint";
                      }
                  });

          svg.selectAll("circle.impact")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(35, (width/25)))
                  .attr("style", "opacity: 0.075")
                  .attr("clip-path", "url(#landclip)")
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city impact nearest";
                      } else {
                          return "city impact";
                      }
                  });

          svg.selectAll("circle.outline")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(21, (width/10)))
                  .attr("style", "opacity: 0.075")
                  .attr("clip-path", "url(#landclip)")
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city outline nearest";
                      } else {
                          return "city outline";
                      }
                  });

          svg.selectAll("circle.handle")
                  .data(batch_regions)
                  .enter()
                  .append("circle")
                  .attr("cx", function(d) { return projection([d.lng, d.lat])[0]; })
                  .attr("cy", function(d) { return projection([d.lng, d.lat])[1]; })
                  .attr("r", Math.min(7, (width/100)))
                  .attr("class", function(d) {
                      if (d.nearest) {
                          return "city handle nearest";
                      } else {
                          return "city handle";
                      }
                  })
                  .on('mouseover', tip.show)
                  .on('mouseout', tip.hide)
                  .on('click', function(d){
                      window.location.href = '/'+ d.id;
                  });

          d3.select(self.frameElement).style("height", height + "px");
          map.css('margin-top', '-'+(height/1.5)+'px');
        };

        var update = function() {
            // Caching the map really makes the load time quicker.
            if(!usCached){
              d3.json("/assets/topo/us.json", function(error, us) {
                usCached = us;
                updateMap(us);
              });
            }else{
              updateMap(usCached);
            }
        };

        update();
        $(window).on('resize', update);
    </script>
{% endblock %}